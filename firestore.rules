rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Common functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Jobs collection rules
    match /jobs/{jobId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Resumes collection rules
    match /resumes/{resumeId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Mock Interviews collection rules
    match /mockInterviews/{interviewId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isOwner(resource.data.interviewerId)
      );
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isOwner(resource.data.interviewerId)
      );
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // User profiles collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAuthenticated() && isOwner(userId);
    }
  }
}
